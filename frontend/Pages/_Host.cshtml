@page "/"
@namespace frontend.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en" >
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Turning Points</title>
    <base href="/" />
    <link href="css/bootstrap/bootstrap.min.css" rel="stylesheet" />
    <link href="css/bootstrap/bootstrap-icons.min.css" rel="stylesheet" />
    <link href="css/app.css" rel="stylesheet" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="css/spinner.css" rel="stylesheet" />
    <link href="frontend.styles.css" rel="stylesheet" />
    <link rel="stylesheet" href="_content/Radzen.Blazor/css/standard-base.css">
</head>
<body >
    <app>
        <component type="typeof(App)" render-mode="Server" />
    </app>

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            <div class="spinner-ainhamento-centro spinner-alinhamento-centro-vertical">
                <div class="spinner"></div>
            </div>
        </environment>
        <environment include="Development">
            <h1 class="text-danger">An unhandled exception has occurred.</h1>
            <p>An unhandled exception has occurred while rendering the application.</p>
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script>
        // Wait until a 'reload' button appears
        new MutationObserver((mutations, observer) => {
            if (document.querySelector('#components-reconnect-modal h5 a')) {
                // Now every 10 seconds, see if the server appears to be back, and if so, reload
                async function attemptReload() {
                    await fetch(''); // Check the server really is back
                    location.reload();
                }
                observer.disconnect();
                attemptReload();
                setInterval(attemptReload, 1000000);
            }
        }).observe(document.body, { childList: true, subtree: true });
    </script>

    <script src="_framework/blazor.server.js"></script>
    <script src="/js/navegador-nao-suportado.js"></script>
    <script src="/js/Scripts.js"></script>
    <script src="/js/Scripts-tabela.js"></script>
    <script src="/js/Multimidia.js"></script>
    <script src="/js/iconify.min.js"></script>
    <script src="_content/Radzen.Blazor/Radzen.Blazor.js?v=@(typeof(Radzen.Colors).Assembly.GetName().Version)"></script>
    <script src="~/_content/BlazorInputFile/inputfile.js"></script>
</body>
</html>
