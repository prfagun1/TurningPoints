@attribute [Authorize]

@inject APIAcess APIAcess
@inject HttpClient HttpClient;
@inject VariaveisAmbiente VariaveisAmbiente
@inject NavigationManager NavigationManager

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private IPermission? PermissoesInternas;

    protected override async Task OnInitializedAsync()
    {
        ArgumentNullException.ThrowIfNull(AuthenticationState);
        PermissoesInternas = new AdministrationPermission((await AuthenticationState).User);
    }
}


<AuthorizeView Roles="@PermissoesInternas?.ReadPermission">
    <Authorized>

        <frontend.Pages.Story._Form Entidade="@Entidade" OnValidSubmit="@Salvar" Processando="@Processando" Modal="@Modal" Mensagem="@Mensagem" />

        @code {

        [Parameter] public Story Entidade { get; set; } = new();
        [Parameter] public Radzen.DialogService? Modal { get; set; }


        private bool Processando;
        private string Mensagem = string.Empty;

        private async Task Salvar()
        {
            await Task.Run(() => Processando = true);


            bool retorno = await APIAcess.EditaDados("v1", "Story", Entidade, Enumerators.APIConnection.api);

            if (retorno)
            {
                Mensagem = "<div class=\"alert alert-success\" role=\"alert\">Data saved successfully</div>";
            }
            else
            {
                Mensagem = "<div class=\"alert alert-danger\" role=\"alert\">Error saving data, please try again later</div>";
            }

            await Task.Run(() => Processando = false);
            StateHasChanged();
        }

        }

    </Authorized>
    <NotAuthorized>
        <frontend.Shared.AcessoNegado />
    </NotAuthorized>
</AuthorizeView>
